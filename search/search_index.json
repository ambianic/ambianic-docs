{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Helpful AI for Home and Business Automation Ambianic's mission is to make our homes and workspaces a little cozier by providing helpful and actionable suggestions. Ambianic is an Open Source Ambient Intelligence platform that puts local control and privacy first. It enables users to train and share custom AI models without compromising privacy. View on Github Project background: * This blog post covers the initial use case and motivation behind the project: Cut The Cloud Strings Attached to Plug-and-Play Surveillance Cameras * This WebRTCHacks article goes deeper into the technical design decisions for the project: Private Home Surveillance with the WebRTC DataChannel The 5 Whys What's the root cause for Ambianic.ai to exist? Below is a 5 Whys diagram that tries to provide objective answers: Needless to say there are subjective reasons which are equally if not more influential for the existence of this project such as basic human excitement to serve a bigger purpose via open source AI. User Journey Ambianic's roadmap is inspired by user stories and community feedback. The following diagram illustrates an example user journey. User journeys help us align on the bigger picture and segue into agile development constructs such as user stories and sprints. More user journeys will be added over time as the project evolves. Some of the candidate topics include: Home Automation Turn traditional door locks into smart locks with Face Recognition. Alert parents if a crying toddler is left unattended for more than 15 minutes. Raise an alert if a baby is seated near a car door without child lock enabled while in motion. Business Automation Prevent accidents by alerting drivers who act sleepy or distracted. Make sure that a factory floor position is not left unattended for more than 15 minutes. Recognize presence of unauthorized people in a restricted access work area. User - System Interactions Users interact with the system in two phases: First Time Installation Consequent App Engagements The following diagram illustrates the high level user - system interactions. User Interface Flow The User Interface is centered around three main activities: Setup Ambianic Edge to communicate with smart home devices: sensors, cameras, microphones, lights, door locks, and others. Design flows to automatically observe sensors and make helpful recommendations. Review event timeline, alerts and actionable recommendations. Ambianic UI is an Offline-First PWA (Progressive Web Application). PWAs work in any browser, but \"app-like\" with features such as being independent of connectivity, install to home screen, and push messaging depend on browser support. Ambianic UI does not assume that the user has constant broadband internet access. Its built to handle a range of real world scenarios with low bandwidth or no-Internet access at all when the user may need to review Ambianic alerts, events timeline, edit flows and configure edge devices. Ambianic UI stores data locally on the client device (mobile or desktop) and, when there\u2019s a network connection, syncs data to the user's Ambianic server and resolves any data conflicts. When possible it communicates directly with local Ambianic Edge devices minimizing network routing overhead. Product Design Goals Our goal is to build a product that is useful out of the box: Less than 15 minutes setup time Less than $75 in hardware costs Primary platform: Raspberry Pi 4 B, 4GB RAM, 32GB SDRAM No coding required to get started Decomposable and hackable for open source developers Quick Start If you would like to try the latest version, follow the steps in the Quick Start Guide . Community Support If you have questions, ideas or cool projects you'd like to share with the Ambianic team and community, please use the Ambianic Twitter channel . Contributors If you are interested in becoming a contributor to the project, please read the Contributing page and follow the steps. Looking forward to hearing from you! Sustainability \ud83c\udf31 Ambianic is 100% Open Source and funded by its user community. 100% Open Source ensures full transparency, privacy and user data ownership. By design, there are no other direct or indirect sources of funding that compromise the core values of the project. The project roadmap is open to community feedback and input. As we reach new levels of regular sponsors, we run a community survey to prioritize the next big roadmap feature. If you are using the project on a daily basis at home, consider investing in its future success either with your time as a contributor or with a small coffee cup donation . Thank you! \ud83d\ude4f If you don't like the direction the project is going and your voice is not heard, cancel your support, fork the code and go in a direction that works for you. Such is the balancing power \ud83d\udc6e of open source software. Keeps everyone honest and humble \ud83d\ude0c. Responsibilty \ud83d\udcce Ambianic does not currently operate within a trusted third party network for installation and setup purposes. The Ambianic product is currently a standalone open sourced asset and no liability can be assumed for any decision taken from an individual or group seeking to utilise its benefits. Nonetheless, potential and actual users of the system, both direct and indirect, could bear in mind the following advice from Ambianic: Conduct proper research on the utility of the product Set clear goals for product functionality Try to understand the product's benefits and limitations In the event of uncertainty please use professional level skills for installation and system setup projects Beware of any 'too good to be true' offers from marketeers offering services that relate to this product Ambianic has been designed to enable a do-it-yourself project although it is recognised that one person's \"easy\" level of technical expertise is another person's \"headache\". For anyone attempting their own independent installation project a certain level of knowledge relating to computer software and hardware is assumed as necessary. Ambianic is currently an open source asset offered in the spirit of beneficial assistance to help those in need or the families and / or those close to those in need. Any use of Ambianic is done so entirely at the risk of the user/s or user/s' representatives (expressed or deemed) and no responsibility for any adverse consequences through system usage can be assumed by Ambianic.","title":"Home"},{"location":"#helpful-ai-for-home-and-business-automation","text":"Ambianic's mission is to make our homes and workspaces a little cozier by providing helpful and actionable suggestions. Ambianic is an Open Source Ambient Intelligence platform that puts local control and privacy first. It enables users to train and share custom AI models without compromising privacy. View on Github Project background: * This blog post covers the initial use case and motivation behind the project: Cut The Cloud Strings Attached to Plug-and-Play Surveillance Cameras * This WebRTCHacks article goes deeper into the technical design decisions for the project: Private Home Surveillance with the WebRTC DataChannel","title":"Helpful AI for Home and Business Automation"},{"location":"#the-5-whys","text":"What's the root cause for Ambianic.ai to exist? Below is a 5 Whys diagram that tries to provide objective answers: Needless to say there are subjective reasons which are equally if not more influential for the existence of this project such as basic human excitement to serve a bigger purpose via open source AI.","title":"The 5 Whys"},{"location":"#user-journey","text":"Ambianic's roadmap is inspired by user stories and community feedback. The following diagram illustrates an example user journey. User journeys help us align on the bigger picture and segue into agile development constructs such as user stories and sprints. More user journeys will be added over time as the project evolves. Some of the candidate topics include: Home Automation Turn traditional door locks into smart locks with Face Recognition. Alert parents if a crying toddler is left unattended for more than 15 minutes. Raise an alert if a baby is seated near a car door without child lock enabled while in motion. Business Automation Prevent accidents by alerting drivers who act sleepy or distracted. Make sure that a factory floor position is not left unattended for more than 15 minutes. Recognize presence of unauthorized people in a restricted access work area.","title":"User Journey"},{"location":"#user-system-interactions","text":"Users interact with the system in two phases: First Time Installation Consequent App Engagements The following diagram illustrates the high level user - system interactions.","title":"User - System Interactions"},{"location":"#user-interface-flow","text":"The User Interface is centered around three main activities: Setup Ambianic Edge to communicate with smart home devices: sensors, cameras, microphones, lights, door locks, and others. Design flows to automatically observe sensors and make helpful recommendations. Review event timeline, alerts and actionable recommendations. Ambianic UI is an Offline-First PWA (Progressive Web Application). PWAs work in any browser, but \"app-like\" with features such as being independent of connectivity, install to home screen, and push messaging depend on browser support. Ambianic UI does not assume that the user has constant broadband internet access. Its built to handle a range of real world scenarios with low bandwidth or no-Internet access at all when the user may need to review Ambianic alerts, events timeline, edit flows and configure edge devices. Ambianic UI stores data locally on the client device (mobile or desktop) and, when there\u2019s a network connection, syncs data to the user's Ambianic server and resolves any data conflicts. When possible it communicates directly with local Ambianic Edge devices minimizing network routing overhead.","title":"User Interface Flow"},{"location":"#product-design-goals","text":"Our goal is to build a product that is useful out of the box: Less than 15 minutes setup time Less than $75 in hardware costs Primary platform: Raspberry Pi 4 B, 4GB RAM, 32GB SDRAM No coding required to get started Decomposable and hackable for open source developers","title":"Product Design Goals"},{"location":"#quick-start","text":"If you would like to try the latest version, follow the steps in the Quick Start Guide .","title":"Quick Start"},{"location":"#community-support","text":"If you have questions, ideas or cool projects you'd like to share with the Ambianic team and community, please use the Ambianic Twitter channel .","title":"Community Support"},{"location":"#contributors","text":"If you are interested in becoming a contributor to the project, please read the Contributing page and follow the steps. Looking forward to hearing from you!","title":"Contributors"},{"location":"#sustainability","text":"Ambianic is 100% Open Source and funded by its user community. 100% Open Source ensures full transparency, privacy and user data ownership. By design, there are no other direct or indirect sources of funding that compromise the core values of the project. The project roadmap is open to community feedback and input. As we reach new levels of regular sponsors, we run a community survey to prioritize the next big roadmap feature. If you are using the project on a daily basis at home, consider investing in its future success either with your time as a contributor or with a small coffee cup donation . Thank you! \ud83d\ude4f If you don't like the direction the project is going and your voice is not heard, cancel your support, fork the code and go in a direction that works for you. Such is the balancing power \ud83d\udc6e of open source software. Keeps everyone honest and humble \ud83d\ude0c.","title":"Sustainability \ud83c\udf31"},{"location":"#responsibilty","text":"Ambianic does not currently operate within a trusted third party network for installation and setup purposes. The Ambianic product is currently a standalone open sourced asset and no liability can be assumed for any decision taken from an individual or group seeking to utilise its benefits. Nonetheless, potential and actual users of the system, both direct and indirect, could bear in mind the following advice from Ambianic: Conduct proper research on the utility of the product Set clear goals for product functionality Try to understand the product's benefits and limitations In the event of uncertainty please use professional level skills for installation and system setup projects Beware of any 'too good to be true' offers from marketeers offering services that relate to this product Ambianic has been designed to enable a do-it-yourself project although it is recognised that one person's \"easy\" level of technical expertise is another person's \"headache\". For anyone attempting their own independent installation project a certain level of knowledge relating to computer software and hardware is assumed as necessary. Ambianic is currently an open source asset offered in the spirit of beneficial assistance to help those in need or the families and / or those close to those in need. Any use of Ambianic is done so entirely at the risk of the user/s or user/s' representatives (expressed or deemed) and no responsibility for any adverse consequences through system usage can be assumed by Ambianic.","title":"Responsibilty \ud83d\udcce"},{"location":"developers/api-overview/","text":"API Overview REST Backend Python Frontend JS Other","title":"API Overview"},{"location":"developers/api-overview/#api-overview","text":"REST Backend Python Frontend JS Other","title":"API Overview"},{"location":"developers/api/","text":"Ambianic APIs API Overview More about our API architecture REST API More about REST API WebSockets API More about our WebSockets API MQTT API More about our MQTT API Backend Python API More about our Python API Frontend JavaScript API More about our JavaScript API","title":"APIs"},{"location":"developers/api/#ambianic-apis","text":"","title":"Ambianic APIs"},{"location":"developers/api/#api-overview","text":"More about our API architecture","title":"API Overview"},{"location":"developers/api/#rest-api","text":"More about REST API","title":"REST API"},{"location":"developers/api/#websockets-api","text":"More about our WebSockets API","title":"WebSockets API"},{"location":"developers/api/#mqtt-api","text":"More about our MQTT API","title":"MQTT API"},{"location":"developers/api/#backend-python-api","text":"More about our Python API","title":"Backend Python API"},{"location":"developers/api/#frontend-javascript-api","text":"More about our JavaScript API","title":"Frontend JavaScript API"},{"location":"developers/architecture/","text":"Ambianic High Level Architecture Pipelines Pipe Elements Sources Outputs Connecting Pipelines Integrations Ambianic's main goal is to observe the environment and provide helpful suggestions in the context of home and business automation. The user has complete ownership and control of Ambianic's input sensors, AI inference flows and processed data storage. All logic executes on user's own edge devices and data is stored only on these devices with optional backup on a user designated server. The main unit of work is the Ambianic pipeline which executes in the runtime of Ambianic Edge devices. The following diagram illustrates an example pipeline which takes as input a video stream URI source such as a surveillance camera and outputs object detections to a local directory. st=>start: Video Source op_obj=>operation: Object Detection AI op_sav1=>parallel: Storage Element io1=>inputoutput: save object detections to file op_face=>operation: Face Detection AI op_sav2=>parallel: Storage Element io2=>inputoutput: save face detections to file e=>end: Output to other pipelines st->op_obj op_obj(bottom)->op_sav1 op_sav1(path1, bottom)->op_face op_sav1(path2, right)->io1 op_face(bottom)->op_sav2 op_sav2(path1, bottom)->e op_sav2(path2, right)->io2 $(\".diagram\").flowchart(); Configuration Here is the corresponding configuration section for the pipeline above (normally located in config.yaml ): pipelines: daytime_front_door_watch: - source: rtsp://user:pass@192.168.86.111:554/Streaming/Channels/101 - detect_objects: # run ai inference on the input data model: tflite: ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite edgetpu: ai_models/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite labels: ai_models/coco_labels.txt confidence_threshold: 0.8 - save_detections: # save samples from the inference results output_directory: ./data/detections/front-door/objects positive_interval: 2 # how often (in seconds) to save samples with ANY results above the confidence threshold idle_interval: 6000 # how often (in seconds) to save samples with NO results above the confidence threshold - detect_faces: # run ai inference on the samples from the previous element output model: tflite: ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite edgetpu: ai_models/mobilenet_ssd_v2_face_quant_postprocess_edgetpu.tflite labels: ai_models/coco_labels.txt confidence_threshold: 0.8 - save_detections: # save samples from the inference results output_directory: ./data/detections/front-door/faces positive_interval: 2 idle_interval: 600 Architectural Decomposition The following slides provide an alternative perspective on the Ambianic Edge architecture.","title":"Architecture"},{"location":"developers/architecture/#ambianic-high-level-architecture","text":"Pipelines Pipe Elements Sources Outputs Connecting Pipelines Integrations Ambianic's main goal is to observe the environment and provide helpful suggestions in the context of home and business automation. The user has complete ownership and control of Ambianic's input sensors, AI inference flows and processed data storage. All logic executes on user's own edge devices and data is stored only on these devices with optional backup on a user designated server. The main unit of work is the Ambianic pipeline which executes in the runtime of Ambianic Edge devices. The following diagram illustrates an example pipeline which takes as input a video stream URI source such as a surveillance camera and outputs object detections to a local directory. st=>start: Video Source op_obj=>operation: Object Detection AI op_sav1=>parallel: Storage Element io1=>inputoutput: save object detections to file op_face=>operation: Face Detection AI op_sav2=>parallel: Storage Element io2=>inputoutput: save face detections to file e=>end: Output to other pipelines st->op_obj op_obj(bottom)->op_sav1 op_sav1(path1, bottom)->op_face op_sav1(path2, right)->io1 op_face(bottom)->op_sav2 op_sav2(path1, bottom)->e op_sav2(path2, right)->io2 $(\".diagram\").flowchart();","title":"Ambianic High Level Architecture"},{"location":"developers/architecture/#configuration","text":"Here is the corresponding configuration section for the pipeline above (normally located in config.yaml ): pipelines: daytime_front_door_watch: - source: rtsp://user:pass@192.168.86.111:554/Streaming/Channels/101 - detect_objects: # run ai inference on the input data model: tflite: ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite edgetpu: ai_models/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite labels: ai_models/coco_labels.txt confidence_threshold: 0.8 - save_detections: # save samples from the inference results output_directory: ./data/detections/front-door/objects positive_interval: 2 # how often (in seconds) to save samples with ANY results above the confidence threshold idle_interval: 6000 # how often (in seconds) to save samples with NO results above the confidence threshold - detect_faces: # run ai inference on the samples from the previous element output model: tflite: ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite edgetpu: ai_models/mobilenet_ssd_v2_face_quant_postprocess_edgetpu.tflite labels: ai_models/coco_labels.txt confidence_threshold: 0.8 - save_detections: # save samples from the inference results output_directory: ./data/detections/front-door/faces positive_interval: 2 idle_interval: 600","title":"Configuration"},{"location":"developers/architecture/#architectural-decomposition","text":"The following slides provide an alternative perspective on the Ambianic Edge architecture.","title":"Architectural Decomposition"},{"location":"developers/cloud-deployment/","text":"Cloud Deployment Scenarios Private Cloud Public Cloud","title":"Cloud Deployment Scenarios"},{"location":"developers/cloud-deployment/#cloud-deployment-scenarios","text":"Private Cloud Public Cloud","title":"Cloud Deployment Scenarios"},{"location":"developers/deployment/","text":"Deployment Scenarios Minimal deployment Reference Architecture Scaling deployments Scaling Up Scaling Out Reference Architecture","title":"Deployment Scenarios"},{"location":"developers/deployment/#deployment-scenarios","text":"Minimal deployment Reference Architecture Scaling deployments Scaling Up Scaling Out Reference Architecture","title":"Deployment Scenarios"},{"location":"developers/edge-deployment/","text":"Edge IoT Deployment Scenarios Raspberry Pi Minimal install, capacity planning, scaling, monitoring.","title":"Edge IoT Deployment Scenarios"},{"location":"developers/edge-deployment/#edge-iot-deployment-scenarios","text":"Raspberry Pi Minimal install, capacity planning, scaling, monitoring.","title":"Edge IoT Deployment Scenarios"},{"location":"developers/hass-integration/","text":"Home Assistant Integration TBD","title":"Home Assistant Integration"},{"location":"developers/hass-integration/#home-assistant-integration","text":"TBD","title":"Home Assistant Integration"},{"location":"developers/home-bridge-integration/","text":"Home Bridge Integration TBD","title":"Home Bridge Integration"},{"location":"developers/home-bridge-integration/#home-bridge-integration","text":"TBD","title":"Home Bridge Integration"},{"location":"developers/integration/","text":"Integration with Smart Home hubs Home Assistant More on Home Assistant Integration Home Bridge More on Home Bridge Integration","title":"Integrations"},{"location":"developers/integration/#integration-with-smart-home-hubs","text":"","title":"Integration with Smart Home hubs"},{"location":"developers/integration/#home-assistant","text":"More on Home Assistant Integration","title":"Home Assistant"},{"location":"developers/integration/#home-bridge","text":"More on Home Bridge Integration","title":"Home Bridge"},{"location":"developers/js-api/","text":"Frontend JavaScript API TBD","title":"Frontend JavaScript API"},{"location":"developers/js-api/#frontend-javascript-api","text":"TBD","title":"Frontend JavaScript API"},{"location":"developers/mqtt-api/","text":"MQTT API TBD","title":"MQTT API"},{"location":"developers/mqtt-api/#mqtt-api","text":"TBD","title":"MQTT API"},{"location":"developers/publish-bazaar/","text":"Publishing to AI Apps Bazaar TBD","title":"Publishing to AI Apps Bazaar"},{"location":"developers/publish-bazaar/#publishing-to-ai-apps-bazaar","text":"TBD","title":"Publishing to AI Apps Bazaar"},{"location":"developers/python-api/","text":"Backend Python API TBD High level description link to raw API","title":"Backend Python API"},{"location":"developers/python-api/#backend-python-api","text":"TBD High level description link to raw API","title":"Backend Python API"},{"location":"developers/rest-api/","text":"REST API TBD","title":"REST API"},{"location":"developers/rest-api/#rest-api","text":"TBD","title":"REST API"},{"location":"developers/websockets-api/","text":"WebSockets API TBD","title":"WebSockets API"},{"location":"developers/websockets-api/#websockets-api","text":"TBD","title":"WebSockets API"},{"location":"developers/writing-plugins-overview/","text":"How to Write and Publish an Ambianic Plugin Ambianic can be extended via custom plugins. Two types of plugins are supported: Edge plugins, and UI plugins Edge plugins execute in an Ambianic Edge device environment, whereas UI plugins execute in the Ambianic UI PWA environment. It is common for a plugin to be built as a package with an Edge and an UI plugin designed to work together for a smooth end-to-end user experience. Let's take for example a VideoSource plugin that reads data from video streams such as live security camera feeds and feeds image frames to an Ambianic AI flow for inference such as person detection. The plugin will have two parts: An edge device plugin VideoSourceEdge which will reside in an Ambianic Edge device and execute in the core Ambianic runtime. It will be installed and configured on the edge device via secure shell access, its public REST APIs or GUI exposed by the VideoSourceUI plugin. An UI plugin VideoSourceUI which will implement GUI widgets for users to configure and control VideoSource connections. This plugin will enrich the visual user experience with the Ambianic UI PWA. st=>start: VideoSource Plugin install=>parallel: Install Plugin edge_plugin=>operation: VideoSourceEdge edge_env=>operation: Ambianic Edge Device src_connect=>inputoutput: Process video streams edge_flow=>operation: AI flow ui_plugin=>operation: VideoSourceUI ui_env=>operation: Ambianic UI PWA user_config=>inputoutput: GUI Configuration st(bottom)->install install(path1, right)->edge_plugin edge_plugin(bottom)->edge_env edge_env(bottom)->src_connect src_connect(bottom)->edge_flow install(path2, bottom)->ui_plugin ui_plugin(bottom)->ui_env ui_env(bottom)->user_config $(\".plugin-overview-diagram\").flowchart(); Anatomy of an Ambianic Edge plugin Ambianic Edge plugins are written in Python. They are essentially pipeline elements. See the architecture document for an overview of pipelines and pipeline elements. An edge plugin must provide at a minimum: Input: Declare input data types Provide implementation of input data consumer Output: Declare output data types Provide implementation of output data producer Configuration: Declare configuration parameters Lifecycle methods: Start Stop Heal An edge plugin may also provide: REST API: Declare public REST APIs in OpenAPI format. Provide implementation for REST APIs Anatomy of an Ambianic UI plugin An UI plugin must provide at a minimum: Install/Uninstall visual UI flow Configuration visual UI flow Runtime data views: Event Timeline: inputs and outputs Alerts: Critical, Warning, Info Stats: such as performance and error rates Event curation: Prioritization: Alert Warning Info Avatar: Image Name Color Follow up Actions: Checkbox Button Link Text Speech Gesture Custom Data curation for plugins with AI inference: Infenrece label correction Adding new labels Removing labels Plugin bundles A plugin bundle consists of: Edge plugin UI plugin A basic edge plugin template The following abstract Python class implements the minimum sceleton of an edge plugin. Plugin implementations should extend this class and add custom logic as we will see further in this document with a more advanced example. class PipeElement(ManagedService): \"\"\"The basic building block of an Ambianic pipeline.\"\"\" def __init__(self): super().__init__() self._state = PIPE_STATE_STOPPED self._next_element = None self._latest_heartbeat = time.monotonic() @property def state(self): \"\"\"Lifecycle state of the pipe element.\"\"\" return self._state def start(self): \"\"\"Only sourcing elements (first in a pipeline) need to override. It is invoked once when the enclosing pipeline is started. It should continue to run until the corresponding stop() method is invoked on the same object from a separate pipeline lifecycle manager thread. It is recommended for overriding methods to invoke this base method via super().start() before proceeding with custom logic. \"\"\" self._state = PIPE_STATE_RUNNING @abc.abstractmethod def heal(self): # pragma: no cover \"\"\"Override with adequate implementation of a healing procedure. heal() is invoked by a lifecycle manager when its determined that the element does not respond within reasonable timeframe. This can happen for example if the element depends on external IO resources, which become unavailable for an extended period of time. The healing procedure should be considered a chance to recover or find an alternative way to proceed. If heal does not reset the pipe element back to a responsive state, it is likely that the lifecycle manager will stop the element and its ecnlosing pipeline. \"\"\" pass def healthcheck(self): \"\"\"Check the health of this element. :returns: (timestamp, status) tuple with most recent heartbeat timestamp and health status code ('OK' normally). \"\"\" status = 'OK' # At some point status may carry richer information return self._latest_heartbeat, status def heartbeat(self): \"\"\"Set the heartbeat timestamp to time.monotonic(). Keeping the heartbeat timestamp current informs the lifecycle manager that this element is functioning well. \"\"\" now = time.monotonic() self._latest_heartbeat = now def stop(self): \"\"\"Receive stop signal and act accordingly. Subclasses implementing sourcing elements should override this method by first invoking their super class implementation and then running through steps specific to stopping their ongoing sample processing. \"\"\" self._state = PIPE_STATE_STOPPED def connect_to_next_element(self, next_element=None): \"\"\"Connect this element to the next element in the pipe. Subclasses should not override this method. \"\"\" assert next_element assert isinstance(next_element, PipeElement) self._next_element = next_element def receive_next_sample(self, **sample): \"\"\"Receive next sample from a connected previous element if applicable. All pipeline elements except for the first (sourcing) element in the pipeline will depend on this method to feed them with new samples to process. Subclasses should not override this method. :Parameters: ---------- **sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. \"\"\" self.heartbeat() for processed_sample in self.process_sample(**sample): if self._next_element: if (processed_sample): self._next_element.receive_next_sample(**processed_sample) else: self._next_element.receive_next_sample() self.heartbeat() @abc.abstractmethod # pragma: no cover def process_sample(self, **sample) -> Iterable[dict]: \"\"\"Override and implement as generator. Invoked by receive_next_sample() when the previous element (or pipeline source) feeds another data input sample. Implementing subclasses should process input samples and yield output samples for the next element in the pipeline. :Parameters: ---------- **sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. :Returns: ---------- processed_sample: Iterable[dict] Generates processed samples to be passed on to the next pipeline element. \"\"\" yield sample The following sequence diagram illustrates an example flow of data from an external security camera source through VideoSourceEdge and the rest of an object detection pipeline. sequenceDiagram participant Cam as Security Camera participant Source as VideoSourceEdge participant Detect as ObjectDetection participant Store as StoreDetection participant File as File System loop Until pipeline.stop() Cam->>Source: rtsp://ip/video/channel0 Source->>Detect: process_sample(image) Detect->>Store: process_sample(det_boxes) Store->>File: file.write(image, det_json) end A basic UI plugin template A basic plugin bundle template A more advanced plugin example Required components of a plugin Optional components of a plugin Writing a custom plugins: step by step Testing plugins Packaging plugins Packaging and Edge plugin Use a standard python wheel and publish on Pypi Packaging and UI plugin Use a standard npm package format and publish on npm Packaging a bundle of plugins In the UI plugin, provide reference to the edge plugin package: PyPi wheel name package version Documenting plugins Publishing plugins More about Publishing your AI app","title":"Writing PLugins"},{"location":"developers/writing-plugins-overview/#how-to-write-and-publish-an-ambianic-plugin","text":"Ambianic can be extended via custom plugins. Two types of plugins are supported: Edge plugins, and UI plugins Edge plugins execute in an Ambianic Edge device environment, whereas UI plugins execute in the Ambianic UI PWA environment. It is common for a plugin to be built as a package with an Edge and an UI plugin designed to work together for a smooth end-to-end user experience. Let's take for example a VideoSource plugin that reads data from video streams such as live security camera feeds and feeds image frames to an Ambianic AI flow for inference such as person detection. The plugin will have two parts: An edge device plugin VideoSourceEdge which will reside in an Ambianic Edge device and execute in the core Ambianic runtime. It will be installed and configured on the edge device via secure shell access, its public REST APIs or GUI exposed by the VideoSourceUI plugin. An UI plugin VideoSourceUI which will implement GUI widgets for users to configure and control VideoSource connections. This plugin will enrich the visual user experience with the Ambianic UI PWA. st=>start: VideoSource Plugin install=>parallel: Install Plugin edge_plugin=>operation: VideoSourceEdge edge_env=>operation: Ambianic Edge Device src_connect=>inputoutput: Process video streams edge_flow=>operation: AI flow ui_plugin=>operation: VideoSourceUI ui_env=>operation: Ambianic UI PWA user_config=>inputoutput: GUI Configuration st(bottom)->install install(path1, right)->edge_plugin edge_plugin(bottom)->edge_env edge_env(bottom)->src_connect src_connect(bottom)->edge_flow install(path2, bottom)->ui_plugin ui_plugin(bottom)->ui_env ui_env(bottom)->user_config $(\".plugin-overview-diagram\").flowchart();","title":"How to Write and Publish an Ambianic Plugin"},{"location":"developers/writing-plugins-overview/#anatomy-of-an-ambianic-edge-plugin","text":"Ambianic Edge plugins are written in Python. They are essentially pipeline elements. See the architecture document for an overview of pipelines and pipeline elements. An edge plugin must provide at a minimum: Input: Declare input data types Provide implementation of input data consumer Output: Declare output data types Provide implementation of output data producer Configuration: Declare configuration parameters Lifecycle methods: Start Stop Heal An edge plugin may also provide: REST API: Declare public REST APIs in OpenAPI format. Provide implementation for REST APIs","title":"Anatomy of an Ambianic Edge plugin"},{"location":"developers/writing-plugins-overview/#anatomy-of-an-ambianic-ui-plugin","text":"An UI plugin must provide at a minimum: Install/Uninstall visual UI flow Configuration visual UI flow Runtime data views: Event Timeline: inputs and outputs Alerts: Critical, Warning, Info Stats: such as performance and error rates Event curation: Prioritization: Alert Warning Info Avatar: Image Name Color Follow up Actions: Checkbox Button Link Text Speech Gesture Custom Data curation for plugins with AI inference: Infenrece label correction Adding new labels Removing labels","title":"Anatomy of an Ambianic UI plugin"},{"location":"developers/writing-plugins-overview/#plugin-bundles","text":"A plugin bundle consists of: Edge plugin UI plugin","title":"Plugin bundles"},{"location":"developers/writing-plugins-overview/#a-basic-edge-plugin-template","text":"The following abstract Python class implements the minimum sceleton of an edge plugin. Plugin implementations should extend this class and add custom logic as we will see further in this document with a more advanced example. class PipeElement(ManagedService): \"\"\"The basic building block of an Ambianic pipeline.\"\"\" def __init__(self): super().__init__() self._state = PIPE_STATE_STOPPED self._next_element = None self._latest_heartbeat = time.monotonic() @property def state(self): \"\"\"Lifecycle state of the pipe element.\"\"\" return self._state def start(self): \"\"\"Only sourcing elements (first in a pipeline) need to override. It is invoked once when the enclosing pipeline is started. It should continue to run until the corresponding stop() method is invoked on the same object from a separate pipeline lifecycle manager thread. It is recommended for overriding methods to invoke this base method via super().start() before proceeding with custom logic. \"\"\" self._state = PIPE_STATE_RUNNING @abc.abstractmethod def heal(self): # pragma: no cover \"\"\"Override with adequate implementation of a healing procedure. heal() is invoked by a lifecycle manager when its determined that the element does not respond within reasonable timeframe. This can happen for example if the element depends on external IO resources, which become unavailable for an extended period of time. The healing procedure should be considered a chance to recover or find an alternative way to proceed. If heal does not reset the pipe element back to a responsive state, it is likely that the lifecycle manager will stop the element and its ecnlosing pipeline. \"\"\" pass def healthcheck(self): \"\"\"Check the health of this element. :returns: (timestamp, status) tuple with most recent heartbeat timestamp and health status code ('OK' normally). \"\"\" status = 'OK' # At some point status may carry richer information return self._latest_heartbeat, status def heartbeat(self): \"\"\"Set the heartbeat timestamp to time.monotonic(). Keeping the heartbeat timestamp current informs the lifecycle manager that this element is functioning well. \"\"\" now = time.monotonic() self._latest_heartbeat = now def stop(self): \"\"\"Receive stop signal and act accordingly. Subclasses implementing sourcing elements should override this method by first invoking their super class implementation and then running through steps specific to stopping their ongoing sample processing. \"\"\" self._state = PIPE_STATE_STOPPED def connect_to_next_element(self, next_element=None): \"\"\"Connect this element to the next element in the pipe. Subclasses should not override this method. \"\"\" assert next_element assert isinstance(next_element, PipeElement) self._next_element = next_element def receive_next_sample(self, **sample): \"\"\"Receive next sample from a connected previous element if applicable. All pipeline elements except for the first (sourcing) element in the pipeline will depend on this method to feed them with new samples to process. Subclasses should not override this method. :Parameters: ---------- **sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. \"\"\" self.heartbeat() for processed_sample in self.process_sample(**sample): if self._next_element: if (processed_sample): self._next_element.receive_next_sample(**processed_sample) else: self._next_element.receive_next_sample() self.heartbeat() @abc.abstractmethod # pragma: no cover def process_sample(self, **sample) -> Iterable[dict]: \"\"\"Override and implement as generator. Invoked by receive_next_sample() when the previous element (or pipeline source) feeds another data input sample. Implementing subclasses should process input samples and yield output samples for the next element in the pipeline. :Parameters: ---------- **sample : dict A dict of (key, value) pairs that represent the sample. It is left to specialized implementations of PipeElement to specify their in/out sample formats and enforce compatibility with adjacent connected pipe elements. :Returns: ---------- processed_sample: Iterable[dict] Generates processed samples to be passed on to the next pipeline element. \"\"\" yield sample The following sequence diagram illustrates an example flow of data from an external security camera source through VideoSourceEdge and the rest of an object detection pipeline. sequenceDiagram participant Cam as Security Camera participant Source as VideoSourceEdge participant Detect as ObjectDetection participant Store as StoreDetection participant File as File System loop Until pipeline.stop() Cam->>Source: rtsp://ip/video/channel0 Source->>Detect: process_sample(image) Detect->>Store: process_sample(det_boxes) Store->>File: file.write(image, det_json) end","title":"A basic edge plugin template"},{"location":"developers/writing-plugins-overview/#a-basic-ui-plugin-template","text":"","title":"A basic UI plugin template"},{"location":"developers/writing-plugins-overview/#a-basic-plugin-bundle-template","text":"","title":"A basic plugin bundle template"},{"location":"developers/writing-plugins-overview/#a-more-advanced-plugin-example","text":"","title":"A more advanced plugin example"},{"location":"developers/writing-plugins-overview/#required-components-of-a-plugin","text":"","title":"Required components of a plugin"},{"location":"developers/writing-plugins-overview/#optional-components-of-a-plugin","text":"","title":"Optional components of a plugin"},{"location":"developers/writing-plugins-overview/#writing-a-custom-plugins-step-by-step","text":"","title":"Writing a custom plugins: step by step"},{"location":"developers/writing-plugins-overview/#testing-plugins","text":"","title":"Testing plugins"},{"location":"developers/writing-plugins-overview/#packaging-plugins","text":"","title":"Packaging plugins"},{"location":"developers/writing-plugins-overview/#packaging-and-edge-plugin","text":"Use a standard python wheel and publish on Pypi","title":"Packaging and Edge plugin"},{"location":"developers/writing-plugins-overview/#packaging-and-ui-plugin","text":"Use a standard npm package format and publish on npm","title":"Packaging and UI plugin"},{"location":"developers/writing-plugins-overview/#packaging-a-bundle-of-plugins","text":"In the UI plugin, provide reference to the edge plugin package: PyPi wheel name package version","title":"Packaging a bundle of plugins"},{"location":"developers/writing-plugins-overview/#documenting-plugins","text":"","title":"Documenting plugins"},{"location":"developers/writing-plugins-overview/#publishing-plugins","text":"More about Publishing your AI app","title":"Publishing plugins"},{"location":"legal/CONTRIBUTING/","text":"How to Contribute We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow. Contributor License Agreement Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project. By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the Apache 2.0 license; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the Apache 2.0 license; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again. Attribution The text of this license is available under the Creative Commons Attribution-ShareAlike 3.0 Unported License. It is based on the Home Assistant CLA, which was in turn derived from the Linux Developer Certificate Of Origin, but modified to explicitly use the Apache 2.0 license and not mention sign-off. Code reviews All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests. Semantic Releases Ambianic.ai adheres to the Semantic Release conventions . All package releases (to npm, pypi, docker) are completely automated in the Continuous Integration and Deployment scripts, which trigger on every Pull Request and commit to a project master branch. Community Guidelines This project follows Google's Open Source Community Guidelines .","title":"Contributing"},{"location":"legal/CONTRIBUTING/#how-to-contribute","text":"We'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.","title":"How to Contribute"},{"location":"legal/CONTRIBUTING/#contributor-license-agreement","text":"Contributions to this project must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution; this simply gives us permission to use and redistribute your contributions as part of the project. By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the Apache 2.0 license; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the Apache 2.0 license; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. You generally only need to submit a CLA once, so if you've already submitted one (even if it was for a different project), you probably don't need to do it again.","title":"Contributor License Agreement"},{"location":"legal/CONTRIBUTING/#attribution","text":"The text of this license is available under the Creative Commons Attribution-ShareAlike 3.0 Unported License. It is based on the Home Assistant CLA, which was in turn derived from the Linux Developer Certificate Of Origin, but modified to explicitly use the Apache 2.0 license and not mention sign-off.","title":"Attribution"},{"location":"legal/CONTRIBUTING/#code-reviews","text":"All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.","title":"Code reviews"},{"location":"legal/CONTRIBUTING/#semantic-releases","text":"Ambianic.ai adheres to the Semantic Release conventions . All package releases (to npm, pypi, docker) are completely automated in the Continuous Integration and Deployment scripts, which trigger on every Pull Request and commit to a project master branch.","title":"Semantic Releases"},{"location":"legal/CONTRIBUTING/#community-guidelines","text":"This project follows Google's Open Source Community Guidelines .","title":"Community Guidelines"},{"location":"users/ai-apps-bazaar/","text":"About the AI Apps Bazaar Github Repo URL Docker hub URL?","title":"About the AI Apps Bazaar"},{"location":"users/ai-apps-bazaar/#about-the-ai-apps-bazaar","text":"Github Repo URL Docker hub URL?","title":"About the AI Apps Bazaar"},{"location":"users/ai-apps/","text":"Ambianic AI Apps Standard apps Custom apps Apps Bazaar","title":"AI Apps"},{"location":"users/ai-apps/#ambianic-ai-apps","text":"Standard apps Custom apps Apps Bazaar","title":"Ambianic AI Apps"},{"location":"users/configure/","text":"Ambianic Configuration Ambianic Edge executes pipelines with input sources, AI inference models and output targets. Ambianic UI visualizes observations in a chronological timeline. Pipelines are configured in a config.yaml file which resides in the runtime directory of the Ambianic Edge docker image. The following diagram illustrates an example pipeline that takes as input a video stream URI source such as a surveillance camera and outputs object detections to a local directory. st=>start: Video Source op_obj=>operation: Object Detection AI op_sav1=>parallel: Storage Element io1=>inputoutput: save object detections to file op_face=>operation: Face Detection AI op_sav2=>parallel: Storage Element io2=>inputoutput: save face detections to file e=>end: Output to other pipelines st->op_obj op_obj(bottom)->op_sav1 op_sav1(path1, bottom)->op_face op_sav1(path2, right)->io1 op_face(bottom)->op_sav2 op_sav2(path1, bottom)->e op_sav2(path2, right)->io2 $(\".diagram\").flowchart(); Pipeline Configuration Create a config.yaml file in the workspace directory of the Ambianic Edge docker image. For example, the directory could be named /opt/ambianid-edge.workspace . You can use this starting config.yaml template and modify it to fit your environment. Read further about the parameters and format of the config file. Let's take an example config.yaml file and walk through it: ###################################### # Ambianic main configuration file # ###################################### version: '1.2.4' # path to the data directory data_dir: &data_dir ./data # Set logging level to one of DEBUG, INFO, WARNING, ERROR logging: file: ./data/ambianic-log.txt level: DEBUG # Pipeline event timeline configuration timeline: event_log: ./data/timeline-event-log.yaml # Cameras and other input data sources # Using Home Assistant conventions to ease upcoming integration sources: front_door_camera: &src_front_door_cam uri: *secret_uri_front_door_camera # type: video, audio, or auto type: video live: true entry_area_camera: &src_entry_area_cam uri: *secret_uri_entry_area_camera type: video # live: is this a live source or a recording # when live is True, the AVSource element will try to reconnect # if the stream is interrupted due to network disruption or another reason. live: true # recorded front door cam feed for quick testing # recorded_cam_feed: &src_recorded_cam_feed # uri: file:///workspace/tests/pipeline/avsource/test2-cam-person1.mkv # type: video ai_models: # image_classification: # tf_graph: # labels: image_detection: &tfm_image_detection model: tflite: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite edgetpu: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite labels: /opt/ambianic-edge/ai_models/coco_labels.txt face_detection: &tfm_face_detection model: tflite: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite edgetpu: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_face_quant_postprocess_edgetpu.tflite labels: /opt/ambianic-edge/ai_models/coco_labels.txt top_k: 2 # A named pipeline defines an ordered sequence of operations # such as reading from a data source, AI model inference, saving samples and others. pipelines: # sequence of piped operations for use in daytime front door watch front_door_watch: - source: *src_front_door_cam - detect_objects: # run ai inference on the input data <<: *tfm_image_detection confidence_threshold: 0.8 - save_detections: # save samples from the inference results positive_interval: 2 # how often (in seconds) to save samples with ANY results above the confidence threshold idle_interval: 6000 # how often (in seconds) to save samples with NO results above the confidence threshold - detect_faces: # run ai inference on the samples from the previous element output <<: *tfm_face_detection confidence_threshold: 0.8 - save_detections: # save samples from the inference results positive_interval: 2 idle_interval: 600 # sequence of piped operations for use in daytime front door watch entry_area_watch: - source: *src_entry_area_cam # - mask: svg # apply a mask to the input data - detect_objects: # run ai inference on the input data <<: *tfm_image_detection confidence_threshold: 0.8 - save_detections: # save samples from the inference results positive_interval: 2 # how often (in seconds) to save samples with ANY results above the confidence thresho$ idle_interval: 6000 # how often (in seconds) to save samples with NO results above the confidence threshold - detect_faces: # run ai inference on the samples from the previous element output <<: *tfm_face_detection confidence_threshold: 0.8 - save_detections: # save samples from the inference results positive_interval: 2 idle_interval: 600 The only parameter you have to change in order to see a populated timeline in the UI is the source uri. In the section below: front_door_camera: &src_front_door_cam uri: *secret_uri_front_door_camera Replace *secret_uri_front_door_camera with your camera still image snapshot URI (recommended). For example: front_door_camera: &src_front_door_cam uri: http://192.168.86.29/cgi-bin/api.cgi?cmd=Snap&channel=0&rs=wuuPhkmUCeI9WG7C&user=admin&password=****** type: image live: true Or you can alternatively plug-in the camera video streaming RTSP URI. For example: front_door_camera: &src_front_door_cam uri: rtsp://admin:password@192.168.1.99/media/video1 type: video live: true Only use RTSP if you run high end hardware and use AI inference in your pipelines that needs video and/or audio data instead of still images. Make sure that the HTTP URI points to a valid image. You can test by simply putting the URI in your web browser. You should see a current snapshot of live camera capture. If you choose to use an RTSP URI, then you can test that with a tool like VLC . The parameter live: true indicates that this is a continuous stream without a predetermined end. Therefore Ambianic Edge should do whatever it can to continuously pull media and recover from interruptions caused by network or other glitches. Now save the file and restart the docker image. Within a few moments you should be able to see a populated timeline in the UI with fresh images from your camera and some object, people and face detections if there are any to detect. You can reference the Quick Start Guide for instructions on starting and stopping the Ambianic Edge docker image. Cameras Cameras are some of the most common sources of input data for Ambianic.ai pipelines. Ambianic.ai is typically connected to IP Network cameras, but you can also connect a local embedded web cam or USB connected camera. Connecting a local Web USB camera Ambianic.ai needs a valid URI to connect to. This requires running an app that captures video from your local camera and streams it over HTTP or RTSP. VLC is one of the most popular and easy to use apps for that. Here is how you can turn your local webcam into an IP streaming camera. The streaming URL shared by VLC is the input source URI for the Ambianic.ai configuration file. How to find the URI for your camera If you don't have experience configuring surveillance cameras, it can be tricky to find the URI. We are working on a camera Plug-and-Play feature in Ambianic to make it easier to discover and connect to your cameras. Keep an eye for release news. In the meanwhile, you have several options: First, check your camera manufacturer's documentation whether it supports still image URL over HTTP or video streaming over RTSP. Most IP cameras do, but not all. If your camera is ONVIF standard conformant, then you will have access to HTTP camera images and RTSP video stream. You can use the ONVIF Search Tool to check if your camera is listed as conformant. You can then use a tool such as ONVIF Device Manager to auto discover your IP camera and show you its RTSP and HTTP URI. Here is a quick How-To . A more detailed post on this tool is also available here . Your camera manufacturer will likely have an online resource describing how to determine its RTSP address. It would look something like this one . There is also an online directory where you can search for the RTSP URI of many camera brands. Using still image source instead of a video stream for your camera URI In many cases processing 1 frame per second is sufficient frequency to detect interesting events in your environment. It is usually more CPU and network resource efficient to use a still image source instead of live RTSP stream for 1fps. This approach allows Ambianic.ai Edge to pull from the camera another image snapshot when it is ready as opposed to streaming which pushes constantly media updates that Edge may or may not be ready to process. All you have to do to use a still image source from your camera is to locate the specific image URI as described above and plug it in the corresponding source section of the config.yaml file. Here is what it would look like: front_door_camera: &src_front_door_cam uri: http://192.168.86.29/cgi-bin/api.cgi?cmd=Snap&channel=0&rs=wuuPhkmUCeI9WG7C&user=admin&password=****** type: image live: true In the example above the URI points to a still jpg sample from the camera. Ambianic Edge will continuously poll this URI approximately once per second (1fps). Sensitive config information In the configuration example, there are a few references to variables defined elsewhere in the YAML file. You can use standard YAML anchors and aliases for that. Notice that *src_front_door_cam and *src_entry_area_cam are the YAML aliases(references) that do not appear elsewhere in config.yaml. They are actually picked up from an optional file located in the same directory: secrets.yaml . Since camera URIs often contain credentials, we recommend that you store such values in secrets.yaml . Ambianic Edge will automatically look for and if available prepend secrets.yaml to config.yaml . That way you can share config.yaml with others without compromising privacy sensitive parameters. An example valid entry in secrets.yaml for a camera URI, would look like this: secret_uri_front_door_camera: &secret_uri_front_door_camera 'rtsp://user:pass@192.168.86.111:554/Streaming/Channels/101' # add more secret entries as regular yaml mappings Other Ambianic Edge configuration settings The rest of the configuration settings are for developers and contributors. If you feel ready to dive into log files and code, you can experiement with different AI models and pipeline elements. Otherwise leave them as they are. Using AI Accelerator Ambianic Edge will use the Google Coral TPU accelerator if one is available on the system. Note: The default docker compose configuration for Ambianic Edge checks whether a USB attached Coral is running on /dev/bus/usb . You may need to adjust that if the TPU is attached to a different file system directory. Coral is a powerful TPU that can speed up inference 5-10 times. However AI inference is only part of all the functions that execute in an Ambianic Edge pipeline. Video decoding and formatting also takes substantial amount of processing time. Overall we've seen Coral to improve performance 30-50% on a realistic Raspberry Pi 4 deployment with multiple simultaneous pipelines pulling images from multiple cameras and processing these images with multiple inference models. If you don't have a Coral device available, no need to worry for now. Raspberry Pi 4 is quite powerful. It comfortably handles 3 simultaneous HD camera sourced pipelines with approximately 1-2 frames per second (fps). An objects or person of interest would normally show up in one of your cameras for at least one second, which is enough time to be registered and processed by Ambianic Edge on a plain RPI4. Local Deployment of Ambanic UI Ambianic UI is available for FREE at ui.ambianic.ai . Its designed to be easy to use with Plug-and-play connectivity to Ambianic Edge. Secured with end-to-end encryption. Your data stays only on your own devices. However if you would like to deploy Ambianic UI on your own machine, its a straightforward process: Ambianic UI is hosted on github. It is also distributed as a Node JS npm package. If you are familiar with Node JS, you can install and run ambianic-ui from its npm distribution. Otherwise, to build from source you can follow these steps: Clone source repository git clone https://github.com/ambianic/ambianic-ui.git cd ambianic-ui Install dependencies npm install Compiles and hot-reloads for development npm run serve After a few moments you should see a message in your terminal window similar to this: App running at: - Local: http://localhost:8080/ - Network: http://192.168.86.246:8080/ Now you can access the app from your browser.","title":"Configuration"},{"location":"users/configure/#ambianic-configuration","text":"Ambianic Edge executes pipelines with input sources, AI inference models and output targets. Ambianic UI visualizes observations in a chronological timeline. Pipelines are configured in a config.yaml file which resides in the runtime directory of the Ambianic Edge docker image. The following diagram illustrates an example pipeline that takes as input a video stream URI source such as a surveillance camera and outputs object detections to a local directory. st=>start: Video Source op_obj=>operation: Object Detection AI op_sav1=>parallel: Storage Element io1=>inputoutput: save object detections to file op_face=>operation: Face Detection AI op_sav2=>parallel: Storage Element io2=>inputoutput: save face detections to file e=>end: Output to other pipelines st->op_obj op_obj(bottom)->op_sav1 op_sav1(path1, bottom)->op_face op_sav1(path2, right)->io1 op_face(bottom)->op_sav2 op_sav2(path1, bottom)->e op_sav2(path2, right)->io2 $(\".diagram\").flowchart();","title":"Ambianic Configuration"},{"location":"users/configure/#pipeline-configuration","text":"Create a config.yaml file in the workspace directory of the Ambianic Edge docker image. For example, the directory could be named /opt/ambianid-edge.workspace . You can use this starting config.yaml template and modify it to fit your environment. Read further about the parameters and format of the config file. Let's take an example config.yaml file and walk through it: ###################################### # Ambianic main configuration file # ###################################### version: '1.2.4' # path to the data directory data_dir: &data_dir ./data # Set logging level to one of DEBUG, INFO, WARNING, ERROR logging: file: ./data/ambianic-log.txt level: DEBUG # Pipeline event timeline configuration timeline: event_log: ./data/timeline-event-log.yaml # Cameras and other input data sources # Using Home Assistant conventions to ease upcoming integration sources: front_door_camera: &src_front_door_cam uri: *secret_uri_front_door_camera # type: video, audio, or auto type: video live: true entry_area_camera: &src_entry_area_cam uri: *secret_uri_entry_area_camera type: video # live: is this a live source or a recording # when live is True, the AVSource element will try to reconnect # if the stream is interrupted due to network disruption or another reason. live: true # recorded front door cam feed for quick testing # recorded_cam_feed: &src_recorded_cam_feed # uri: file:///workspace/tests/pipeline/avsource/test2-cam-person1.mkv # type: video ai_models: # image_classification: # tf_graph: # labels: image_detection: &tfm_image_detection model: tflite: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite edgetpu: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite labels: /opt/ambianic-edge/ai_models/coco_labels.txt face_detection: &tfm_face_detection model: tflite: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite edgetpu: /opt/ambianic-edge/ai_models/mobilenet_ssd_v2_face_quant_postprocess_edgetpu.tflite labels: /opt/ambianic-edge/ai_models/coco_labels.txt top_k: 2 # A named pipeline defines an ordered sequence of operations # such as reading from a data source, AI model inference, saving samples and others. pipelines: # sequence of piped operations for use in daytime front door watch front_door_watch: - source: *src_front_door_cam - detect_objects: # run ai inference on the input data <<: *tfm_image_detection confidence_threshold: 0.8 - save_detections: # save samples from the inference results positive_interval: 2 # how often (in seconds) to save samples with ANY results above the confidence threshold idle_interval: 6000 # how often (in seconds) to save samples with NO results above the confidence threshold - detect_faces: # run ai inference on the samples from the previous element output <<: *tfm_face_detection confidence_threshold: 0.8 - save_detections: # save samples from the inference results positive_interval: 2 idle_interval: 600 # sequence of piped operations for use in daytime front door watch entry_area_watch: - source: *src_entry_area_cam # - mask: svg # apply a mask to the input data - detect_objects: # run ai inference on the input data <<: *tfm_image_detection confidence_threshold: 0.8 - save_detections: # save samples from the inference results positive_interval: 2 # how often (in seconds) to save samples with ANY results above the confidence thresho$ idle_interval: 6000 # how often (in seconds) to save samples with NO results above the confidence threshold - detect_faces: # run ai inference on the samples from the previous element output <<: *tfm_face_detection confidence_threshold: 0.8 - save_detections: # save samples from the inference results positive_interval: 2 idle_interval: 600 The only parameter you have to change in order to see a populated timeline in the UI is the source uri. In the section below: front_door_camera: &src_front_door_cam uri: *secret_uri_front_door_camera Replace *secret_uri_front_door_camera with your camera still image snapshot URI (recommended). For example: front_door_camera: &src_front_door_cam uri: http://192.168.86.29/cgi-bin/api.cgi?cmd=Snap&channel=0&rs=wuuPhkmUCeI9WG7C&user=admin&password=****** type: image live: true Or you can alternatively plug-in the camera video streaming RTSP URI. For example: front_door_camera: &src_front_door_cam uri: rtsp://admin:password@192.168.1.99/media/video1 type: video live: true Only use RTSP if you run high end hardware and use AI inference in your pipelines that needs video and/or audio data instead of still images. Make sure that the HTTP URI points to a valid image. You can test by simply putting the URI in your web browser. You should see a current snapshot of live camera capture. If you choose to use an RTSP URI, then you can test that with a tool like VLC . The parameter live: true indicates that this is a continuous stream without a predetermined end. Therefore Ambianic Edge should do whatever it can to continuously pull media and recover from interruptions caused by network or other glitches. Now save the file and restart the docker image. Within a few moments you should be able to see a populated timeline in the UI with fresh images from your camera and some object, people and face detections if there are any to detect. You can reference the Quick Start Guide for instructions on starting and stopping the Ambianic Edge docker image.","title":"Pipeline Configuration"},{"location":"users/configure/#cameras","text":"Cameras are some of the most common sources of input data for Ambianic.ai pipelines. Ambianic.ai is typically connected to IP Network cameras, but you can also connect a local embedded web cam or USB connected camera.","title":"Cameras"},{"location":"users/configure/#connecting-a-local-web-usb-camera","text":"Ambianic.ai needs a valid URI to connect to. This requires running an app that captures video from your local camera and streams it over HTTP or RTSP. VLC is one of the most popular and easy to use apps for that. Here is how you can turn your local webcam into an IP streaming camera. The streaming URL shared by VLC is the input source URI for the Ambianic.ai configuration file.","title":"Connecting a local Web USB camera"},{"location":"users/configure/#how-to-find-the-uri-for-your-camera","text":"If you don't have experience configuring surveillance cameras, it can be tricky to find the URI. We are working on a camera Plug-and-Play feature in Ambianic to make it easier to discover and connect to your cameras. Keep an eye for release news. In the meanwhile, you have several options: First, check your camera manufacturer's documentation whether it supports still image URL over HTTP or video streaming over RTSP. Most IP cameras do, but not all. If your camera is ONVIF standard conformant, then you will have access to HTTP camera images and RTSP video stream. You can use the ONVIF Search Tool to check if your camera is listed as conformant. You can then use a tool such as ONVIF Device Manager to auto discover your IP camera and show you its RTSP and HTTP URI. Here is a quick How-To . A more detailed post on this tool is also available here . Your camera manufacturer will likely have an online resource describing how to determine its RTSP address. It would look something like this one . There is also an online directory where you can search for the RTSP URI of many camera brands.","title":"How to find the URI for your camera"},{"location":"users/configure/#using-still-image-source-instead-of-a-video-stream-for-your-camera-uri","text":"In many cases processing 1 frame per second is sufficient frequency to detect interesting events in your environment. It is usually more CPU and network resource efficient to use a still image source instead of live RTSP stream for 1fps. This approach allows Ambianic.ai Edge to pull from the camera another image snapshot when it is ready as opposed to streaming which pushes constantly media updates that Edge may or may not be ready to process. All you have to do to use a still image source from your camera is to locate the specific image URI as described above and plug it in the corresponding source section of the config.yaml file. Here is what it would look like: front_door_camera: &src_front_door_cam uri: http://192.168.86.29/cgi-bin/api.cgi?cmd=Snap&channel=0&rs=wuuPhkmUCeI9WG7C&user=admin&password=****** type: image live: true In the example above the URI points to a still jpg sample from the camera. Ambianic Edge will continuously poll this URI approximately once per second (1fps).","title":"Using still image source instead of a video stream for your camera URI"},{"location":"users/configure/#sensitive-config-information","text":"In the configuration example, there are a few references to variables defined elsewhere in the YAML file. You can use standard YAML anchors and aliases for that. Notice that *src_front_door_cam and *src_entry_area_cam are the YAML aliases(references) that do not appear elsewhere in config.yaml. They are actually picked up from an optional file located in the same directory: secrets.yaml . Since camera URIs often contain credentials, we recommend that you store such values in secrets.yaml . Ambianic Edge will automatically look for and if available prepend secrets.yaml to config.yaml . That way you can share config.yaml with others without compromising privacy sensitive parameters. An example valid entry in secrets.yaml for a camera URI, would look like this: secret_uri_front_door_camera: &secret_uri_front_door_camera 'rtsp://user:pass@192.168.86.111:554/Streaming/Channels/101' # add more secret entries as regular yaml mappings","title":"Sensitive config information"},{"location":"users/configure/#other-ambianic-edge-configuration-settings","text":"The rest of the configuration settings are for developers and contributors. If you feel ready to dive into log files and code, you can experiement with different AI models and pipeline elements. Otherwise leave them as they are.","title":"Other Ambianic Edge configuration settings"},{"location":"users/configure/#using-ai-accelerator","text":"Ambianic Edge will use the Google Coral TPU accelerator if one is available on the system. Note: The default docker compose configuration for Ambianic Edge checks whether a USB attached Coral is running on /dev/bus/usb . You may need to adjust that if the TPU is attached to a different file system directory. Coral is a powerful TPU that can speed up inference 5-10 times. However AI inference is only part of all the functions that execute in an Ambianic Edge pipeline. Video decoding and formatting also takes substantial amount of processing time. Overall we've seen Coral to improve performance 30-50% on a realistic Raspberry Pi 4 deployment with multiple simultaneous pipelines pulling images from multiple cameras and processing these images with multiple inference models. If you don't have a Coral device available, no need to worry for now. Raspberry Pi 4 is quite powerful. It comfortably handles 3 simultaneous HD camera sourced pipelines with approximately 1-2 frames per second (fps). An objects or person of interest would normally show up in one of your cameras for at least one second, which is enough time to be registered and processed by Ambianic Edge on a plain RPI4.","title":"Using AI Accelerator"},{"location":"users/configure/#local-deployment-of-ambanic-ui","text":"Ambianic UI is available for FREE at ui.ambianic.ai . Its designed to be easy to use with Plug-and-play connectivity to Ambianic Edge. Secured with end-to-end encryption. Your data stays only on your own devices. However if you would like to deploy Ambianic UI on your own machine, its a straightforward process: Ambianic UI is hosted on github. It is also distributed as a Node JS npm package. If you are familiar with Node JS, you can install and run ambianic-ui from its npm distribution. Otherwise, to build from source you can follow these steps:","title":"Local Deployment of Ambanic UI"},{"location":"users/configure/#clone-source-repository","text":"git clone https://github.com/ambianic/ambianic-ui.git cd ambianic-ui","title":"Clone source repository"},{"location":"users/configure/#install-dependencies","text":"npm install","title":"Install dependencies"},{"location":"users/configure/#compiles-and-hot-reloads-for-development","text":"npm run serve After a few moments you should see a message in your terminal window similar to this: App running at: - Local: http://localhost:8080/ - Network: http://192.168.86.246:8080/ Now you can access the app from your browser.","title":"Compiles and hot-reloads for development"},{"location":"users/custom-ai-apps/","text":"Installing and Running Custom AI Apps Examples of custom apps Where to get custom apps How to install and run","title":"Installing and Running Custom AI Apps"},{"location":"users/custom-ai-apps/#installing-and-running-custom-ai-apps","text":"Examples of custom apps Where to get custom apps How to install and run","title":"Installing and Running Custom AI Apps"},{"location":"users/edge-pairing/","text":"This is an overview of the connection flow between Ambianic UI and Ambianic Edge Upon starting the Ambianic Web UI, it will automatically start searching for an Ambianic Edge on your own local network. Either press VIEW TIMELINE to see the data from your own Edge, or press SETTINGS if you wish to connect to someone else's Edge (remote connection) or see details about your own Edge. If you are not connected to a network, you will see a card showing that the UI is looking for an Edge on your local network. Once connected, it will change to: If you don't want to be connected to your own netwrok, for example you want to connect to your parents Edge, you can scroll down to Pair with Remote Ambianic Edge device and enter the PeerJS ID you get from them. Enter the Peer JS ID in the input field and press PAIR REMOTELY . Once connected, click on the link Timeline to see the Edge's data. When done, go back to Settings and use DISCOVER ON LOCAL NETWORK This will make sure you get disconnected from the remote Edge and connect back to your own local network Edge.","title":"Remote / Local connection"},{"location":"users/edge-pairing/#this-is-an-overview-of-the-connection-flow-between-ambianic-ui-and-ambianic-edge","text":"Upon starting the Ambianic Web UI, it will automatically start searching for an Ambianic Edge on your own local network. Either press VIEW TIMELINE to see the data from your own Edge, or press SETTINGS if you wish to connect to someone else's Edge (remote connection) or see details about your own Edge. If you are not connected to a network, you will see a card showing that the UI is looking for an Edge on your local network. Once connected, it will change to: If you don't want to be connected to your own netwrok, for example you want to connect to your parents Edge, you can scroll down to Pair with Remote Ambianic Edge device and enter the PeerJS ID you get from them. Enter the Peer JS ID in the input field and press PAIR REMOTELY . Once connected, click on the link Timeline to see the Edge's data. When done, go back to Settings and use DISCOVER ON LOCAL NETWORK This will make sure you get disconnected from the remote Edge and connect back to your own local network Edge.","title":"This is an overview of the connection flow between Ambianic UI and Ambianic Edge"},{"location":"users/faq/","text":"Frequently Asked Questions Does Ambianic use hardware accelerators for AI inference? Yes. Ambianic currently supports the Google Coral EdgeTPU. The server relies on the Tensorflow Lite Runtime to dynamically detect Coral. If no EdgeTPU is available, AI inference falls back on the CPU. Check your logs for messages indicating EdgeTPU availability. Does Ambianic use hardware accelerators for video processing? Yes. Ambianic relies on gstreamer to dynamically detect and use any available GPU on the host platform for video and image processing. Asked Asked Asked 6. 2. TBD","title":"FAQ"},{"location":"users/faq/#frequently-asked-questions","text":"Does Ambianic use hardware accelerators for AI inference? Yes. Ambianic currently supports the Google Coral EdgeTPU. The server relies on the Tensorflow Lite Runtime to dynamically detect Coral. If no EdgeTPU is available, AI inference falls back on the CPU. Check your logs for messages indicating EdgeTPU availability. Does Ambianic use hardware accelerators for video processing? Yes. Ambianic relies on gstreamer to dynamically detect and use any available GPU on the host platform for video and image processing. Asked Asked Asked 6. 2. TBD","title":"Frequently Asked Questions"},{"location":"users/howto/","text":"How To TBD","title":"How To"},{"location":"users/howto/#how-to","text":"TBD","title":"How To"},{"location":"users/install/","text":"Installing and Running Ambianic Quickstart reference Various install scenarios: CPU, OS matrix","title":"Installing and Running Ambianic"},{"location":"users/install/#installing-and-running-ambianic","text":"Quickstart reference Various install scenarios: CPU, OS matrix","title":"Installing and Running Ambianic"},{"location":"users/mobileui/","text":"Amianic Mobile UI Registration and login Your Inference Timeline Alerts and Notifications","title":"Mobile UI"},{"location":"users/mobileui/#amianic-mobile-ui","text":"Registration and login Your Inference Timeline Alerts and Notifications","title":"Amianic Mobile UI"},{"location":"users/quickstart/","text":"5 Minute Quick Start Ambianic's goal is to provide helpful and actionable suggestions in the context of home and business automation. Ambianic has two major components: Ambianic UI and Ambianic Edge. Ambianic UI is pre-deployed and readily available at https://ui.ambianic.ai . If you are familiar with Docker you will be able to install Ambianic Edge in less than 5 minutes. Let's go step by step. Ambanic Edge Ambianic Edge is available as a docker image for ARM and x86 architectures so it can be deployed on most modern machines and operating systems. The reference test system is: Raspberry Pi 4 with 4GB RAM and 32GB SD card . Although docker images are available for most common ARM and x86 machines. To deploy on a Raspberry Pi 4, you will need a recent Raspbian install with Docker and Docker Compose on it. You can install and run the image in the default pi user space on Raspbian. Feel free to use this shell script provided by Luca Capra that installs Docker and Docker Compose on a Raspberry Pi system (or another Debian flavored Linux) and runs a minimal Ambianic Edge configuration. Starting Ambianic Edge Here is a default docker-compose.yaml file that you can start with. It takes care of monitoring the health of Ambianic Edge, restarting when necessary and also graceful automatic updates to the latest release within 5 minutes. Note: The very first time you start Ambianic Edge it may take a minute or two. You will then see an error message that configuration file could not be found. Worry not. We will address that in due course. Let's get the base system running first. Then we will come back to configuration settings. Ambanic UI Ambianic UI is a modern prorgressive web application (PWA) that provides Plug-and-Play pairing and remote access to an Ambianic Edge device. Ambianic UI shows a timeline view with important events around your home organized chronologically. Below is an example timeline screenshot. Pairing Ambanic UI with Ambianic Edge You can easily pair up your Ambianic UI with Ambianic Edge. It works similar to Airdrop. Make sure to open Ambianic UI on the same local network where Ambianic Edge runs. Ambianic UI will initially display a welcome screen. If you click on Settings, it will show a pairing page like the one below: After a few moments, pairing will conclude and you will see the unique identifier of your Ambianic Edge device. Congratulations! Your Ambianic instance is now up and running! Configuration You are now ready to configure Ambianic: pipelines, input sources and AI models. Read on: Configuring Ambianic Edge . Once you configure Ambianic Edge and restart the docker image, you should be able to see timeline view like the one above. The pairing information is persisted on your Ambianic UI client device and you can now access Ambianic Edge from anywhere remotely! The connection is direct and encrypted end-to-end. Troubleshooting If you experience problems with your initial setup and you can't find a good solution online, feel free to engage the team on Twitter or open a github issue . Supporting the project If you find value in this project, consider supporting its future success. See the sustainability section.","title":"Quick Start"},{"location":"users/quickstart/#5-minute-quick-start","text":"Ambianic's goal is to provide helpful and actionable suggestions in the context of home and business automation. Ambianic has two major components: Ambianic UI and Ambianic Edge. Ambianic UI is pre-deployed and readily available at https://ui.ambianic.ai . If you are familiar with Docker you will be able to install Ambianic Edge in less than 5 minutes. Let's go step by step.","title":"5 Minute Quick Start"},{"location":"users/quickstart/#ambanic-edge","text":"Ambianic Edge is available as a docker image for ARM and x86 architectures so it can be deployed on most modern machines and operating systems. The reference test system is: Raspberry Pi 4 with 4GB RAM and 32GB SD card . Although docker images are available for most common ARM and x86 machines. To deploy on a Raspberry Pi 4, you will need a recent Raspbian install with Docker and Docker Compose on it. You can install and run the image in the default pi user space on Raspbian. Feel free to use this shell script provided by Luca Capra that installs Docker and Docker Compose on a Raspberry Pi system (or another Debian flavored Linux) and runs a minimal Ambianic Edge configuration.","title":"Ambanic Edge"},{"location":"users/quickstart/#starting-ambianic-edge","text":"Here is a default docker-compose.yaml file that you can start with. It takes care of monitoring the health of Ambianic Edge, restarting when necessary and also graceful automatic updates to the latest release within 5 minutes. Note: The very first time you start Ambianic Edge it may take a minute or two. You will then see an error message that configuration file could not be found. Worry not. We will address that in due course. Let's get the base system running first. Then we will come back to configuration settings.","title":"Starting Ambianic Edge"},{"location":"users/quickstart/#ambanic-ui","text":"Ambianic UI is a modern prorgressive web application (PWA) that provides Plug-and-Play pairing and remote access to an Ambianic Edge device. Ambianic UI shows a timeline view with important events around your home organized chronologically. Below is an example timeline screenshot.","title":"Ambanic UI"},{"location":"users/quickstart/#pairing-ambanic-ui-with-ambianic-edge","text":"You can easily pair up your Ambianic UI with Ambianic Edge. It works similar to Airdrop. Make sure to open Ambianic UI on the same local network where Ambianic Edge runs. Ambianic UI will initially display a welcome screen. If you click on Settings, it will show a pairing page like the one below: After a few moments, pairing will conclude and you will see the unique identifier of your Ambianic Edge device. Congratulations! Your Ambianic instance is now up and running!","title":"Pairing Ambanic UI with Ambianic Edge"},{"location":"users/quickstart/#configuration","text":"You are now ready to configure Ambianic: pipelines, input sources and AI models. Read on: Configuring Ambianic Edge . Once you configure Ambianic Edge and restart the docker image, you should be able to see timeline view like the one above. The pairing information is persisted on your Ambianic UI client device and you can now access Ambianic Edge from anywhere remotely! The connection is direct and encrypted end-to-end.","title":"Configuration"},{"location":"users/quickstart/#troubleshooting","text":"If you experience problems with your initial setup and you can't find a good solution online, feel free to engage the team on Twitter or open a github issue .","title":"Troubleshooting"},{"location":"users/quickstart/#supporting-the-project","text":"If you find value in this project, consider supporting its future success. See the sustainability section.","title":"Supporting the project"},{"location":"users/standard-ai-apps/","text":"Standard AI Apps Included with the base Ambianic distribution Object Detection Face Detection Face Recognition Etc.","title":"Standard AI Apps Included with the base Ambianic distribution"},{"location":"users/standard-ai-apps/#standard-ai-apps-included-with-the-base-ambianic-distribution","text":"Object Detection Face Detection Face Recognition Etc.","title":"Standard AI Apps Included with the base Ambianic distribution"},{"location":"users/support/","text":"Support TBD","title":"Support"},{"location":"users/support/#support","text":"TBD","title":"Support"},{"location":"users/webui/","text":"Amianic Web UI Registration and login Securing access AI Apps Overview Pipelines Overview Advanced Pipeline Composition","title":"Web UI"},{"location":"users/webui/#amianic-web-ui","text":"Registration and login Securing access AI Apps Overview Pipelines Overview Advanced Pipeline Composition","title":"Amianic Web UI"}]}